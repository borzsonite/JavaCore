Start at 10.11.2020:6:28

1. В Java строки являются объектами класса java.lang.String, который является обычным классом но со специальной поддержкой компилятором. Этот класс представляет строку в виде набора символов UTF-16, где дополнительные символы представляются в виде суррогатных пар, другими словами один символ Юникода может состоять из двух char code unit. Индекс в строке адресует char code unit, а не символ. Дополнительные символы используют две позиции в строке.

2. Все строковые литералы в Java являются объектами класса java.lang.String. Когда компилятор видит строковый литерал, например "Hello world!", в коде, он создаёт объект класса java.lang.String .

3. Так как строковые литеры являются объектами, то у них можно вызывать методы: System.out.println("Hi, Larry.".length());  // 9

4. Каждый объект в Java может участвовать в операции конкатенации (соединения) строк, в этом случае используется метод toString() , (если ссылка на объект равна null, то используется строка "null" ):

5. Класс String  НЕ имеет специальной поддержки для == , поэтому сравнивать строки нужно либо через метод equals() , либо equalsIgnoreCase() , либо compareTo() , либо compareToIgnoreCase().

6. String vasya = "Vasya", ya = "ya";
   System.out.println(vasya == "Vasya"); // true. Одинаковые строковые литералы всегда ссылаются на один и тот же экземпляр класса String.
   System.out.println(vasya == ("Vas" + ya)); // false. Экземпляры классы String , вычисленные во время выполнения, создаются заново, автоматически в пуле не участвуют и потому различны.
   System.out.println(vasya == ("Vas" + "ya")); // true. Строковые литералы в константных выражениях вычисляются на этапе компиляции и затем расцениваются как обычные литералы.
   System.out.println(vasya == ("Vas" + ya).intern()); // true. С помощью метода intern() можно добавить строку в пул либо получить ссылку на такую строку из пула.

7. Некоторые методы принимают в качестве параметров начальный индекс и конечный индекс. В этом случае начальный индекс включается в отрезок, а конечный индекс исключается, так что длина отрезка получается равной конечный индекс минус начальный индекс, как на картинке. Подобная индексация является стандартом в Java. Всегда когда указывается отрезок в массиве, строке, списке или ещё-где-то, начальный индекс включается в отрезок, а конечный исключается.

8. public String intern(). Магический метод. В Java существует пул строк. Этот метод проверяет наличие строки в пуле, если в пуле есть такая строка, то метод возвращает ссылку на неё. Если в пуле нет такой строки, то строка добавляется в пул, и возвращается ссылка на неё. Все строковые литералы и константы автоматически включаются в пул.

9. В отличие от String класс StringBuilder позволяет менять содержимое своих экземпляров.

10. В отличие от String  у StringBuilder  кроме длины есть ещё вместимость/ёмкость (capacity). Вместительность можно узнать с помощью метода capacity() , она всегда больше или равна длине.

11. Никогда, запомните – НИКОГДА не используйте прямую конкатенацию строк, особенно в циклах. Даже в каком-нибудь методе toString, если он вызывается достаточно часто, имеет смысл использовать StringBuffer вместо конкатенации. Собственно, компилятор при оптимизации чаще всего так и делает – прямые сложения он выполняет через StringBuffer. Однако в случаях, подобных тому, что привел я, оптимизацию компилятор сделать не в состоянии. Что и приводит к весьма печальным последствиям

12. В большинстве случаев мы используем StringBuffer для многократного выполнения операций добавления (append), вставки (insert) и удаления (delete) подстрок. Тут все очень просто, например:
    String domain = ".ru";
    // создадим буфер с помощью String объекта
    StringBuffer buffer = new StringBuffer("habrahabr"); // "habrahabr"
    // вставим домен в конец
    buffer.append(domain); // "habrahabr.ru"
    // удалим домен
    buffer.delete(buffer.length() - domain.length(), buffer.length()); // "habrahabr"
    // вставим домен в конец на этот раз используя insert
    buffer.insert(buffer.length(), domain); // "habrahabr.ru"

13. StringBuffer может быть использован в многопоточных средах, так как все необходимые методы являются синхронизированными.

14. Фрагмент кода может содержать несколько проблемных мест. Например, кроме деления на ноль, возможна ошибка индексации массива. В таком случае вам нужно создать два или более операторов catch для каждого типа исключения. Причём они проверяются по порядку. Если исключение будет обнаружено у первого блока обработки, то он будет выполнен, а остальные проверки пропускаются и выполнение программы продолжается с места, который следует за блоком try/catch.

15. Операторы try могут быть вложенными. Если вложенный оператор try не имеет своего обработчика catch для определения исключения, то идёт поиск обработчика catch у внешнего блока try и т.д. Если подходящий catch не будет найден, то исключение обработает сама система (что никуда не годится).

16. Поток выполнения останавливается непосредственно после оператора throw и другие операторы не выполняются. При этом ищется ближайший блок try/catch соответствующего исключению типа.

17. Многие классы исключений кроме стандартного конструктора по умолчанию с пустыми скобками имеют второй конструктор с строковым параметром, в котором можно разместить подходящую информацию об исключении. Получить текст из него можно через метод getMessage().

    public void onClick(View view) {
        if (cat == null) {
            try {
                throw new NullPointerException("Кота не существует");
            } catch (NullPointerException e) {
                Toast.makeText(this, e.getMessage(), Toast.LENGTH_LONG).show();
            }
        }
    }

18. Конструкторы не наследуются;

19. Конструктор не имеет возвращаемого типа, им не может быть даже тип void, если возвращается тип void, то это уже не конструктор а метод, несмотря на совпадение с именем класса.

20. В конструкторе допускается оператор return, но только пустой, без всякого возвращаемого значения;

21. Ключевое слово super вызывает конструктор родительского класса. Если используется, должно обращение к нему быть первой строкой конструктора;

22. Если конструктор не делает вызов конструктора super класса-предка (с аргументами или без аргументов), компилятор автоматически добавляет код вызова конструктора класса-предка без аргументов;

23. В Java SDK 1.5 появился долгожданный инструмент – аргументы  переменной длины для конструкторов и методов(variable-length arguments).

    class Checking {
        public Checking(String s, int ... n) { // varargs должен быть последним
        }
    }

24. System.arrayCopy(from, fromIndex, to, toIndex, count);
    from - массив, который копируем
    to - массив в которой копируем
    fromIndex - индекс в массиве from начиная с которого берем элементы для копирования
    toIndex - индекс в массиве to начиная с которого вставляем элементы
    count - количество элементов которые берем из массива from и вставляем в массив to
    Массив to должен иметь достаточный размер, чтобы в нем уместились все копируемые элементы.

25. Анотации ставяться над классами, полями, методами

26. @Target
    ElementType.ANNOTATION_TYPE // аннотация может присутствовать только над другими аннотациями
    ElementType.CONSTRUCTOR // аннотация может присутствовать только над конструктором
    ElementType.FIELD // аннотация может присутствовать только над полем класса
    ElementType.LOCAL_VARIABlE // аннотация может присутствовать только над локальной переменной метода
    ElementType.METHOD // аннотация может присутствовать только над методом
    ElementType.PACKAGE // аннотация может присутствовать только над пакетом
    ElementType.PARAMETER // аннотация может присутствовать только над параметром
    ElementType.TYPE // аннотация может присутствовать только над классом или интерфейсом

    @Retention
    RetentionPolicy.SOURCE // аннотация будет присутствовать только в исходном коде
    RetentionPolicy.CLASS // только во вермя компиляции
    RetentionPolicy.RUNTIME //

27. При помощи Reflection api и  обекта класса Class можно получать всю инфомацию о классе.

28. При загрузке какого либо класса в память для этого класса создается объект типа Class, который содержит всю иноформацию о загружаемом классе (какие поля, методы содержаться и много др.)

29. Получить объект класса Class можно тремя способами:

    MyClass a = new MyClass();
    Class<MyClass> aclass = a.getClass(); // 1.
    Class<MyClass> aclass = MyClass.class(); // 2.
    Class<?> c = Class.forName("java.lang.Byte"); // 3.

30. Для всех классов во время компиляции создается класс Class, который содержит описание всех полей и методов создаваемых классов.

31. Плучичить экземпляр типа Class можно 2мя способами:
    ИмяЭкземпрляра.getClass();
    ИмяКласса.class;

32. .getDeclaredFields() возвращает массив объектов типа Field. Унаследованые поля не включаются.

33. Объект java.lang.Class является точкой входа для всех операций рефлексии. Для каждого типа объекта, JVM создает неизменяемый экземпляр java.lang.Class который предоставляет методы для получения свойств объекта, создания новых объектов, вызова методов.

34. Если мы знаем название класса во время компиляции, то сможем получить объект следующим образом:
    Class mClassObject = SomeObject.class

35. Если мы не знаем имя во время компиляции, но знаем имя класса во время выполнения, то можно сделать так:
    Class mClassObject = Class.forName("здесь имя класса")
    При использовании метода Class.forName() мы должны указать полное имя класса.

36. Мы можем получить доступ к модификаторам доступа с помощью Class объекта. Модификаторы представляют собой ключевые слова public, static, private и т.д. Мы можем получить модификаторы с помощью метода .getModifiers()

37. Зная только класс мы можем получить информацию о пакете:
Class mClassObject = SomeObject.class
Package package = mClassObject.getPackage();

38. Зная объект Class, мы можем получить доступ к его суперклассу:
    Class mClassObject = SomeObject.class
    Class superclass = mClassObject.getSuperclass();

39. Список интерфейсов, реализуемых данным классом можно получить так:
    Class mClassObject = SomeObject.class
    Class[] interfaces = mClassObject.getInterfaces();

40. Нам не нужно получать массив со всеми методами, если нам известны точные типы параметров метода, который мы хотим использовать. Например, у нас есть метод под названием «sayHello«, который принимает String в качестве параметра. Получить объект Method для него можно так:
    Class mClassObject = SomeObject.class
    Method method = mClassObject.getMethod("sayHello", new Class[]{String.class});
Если метод sayHello() без параметров, то нужно передать null в методе getMethod():
Method method = mClassObject.getMethod("sayHello", null);

41. Если ожидаемый результат это исключение, задать это можно так:
    @Test(expected = ArithmeticException.class)

42. Запустить пачку тестов:

    public static void main(String[] args) {
        Result result = JUnitCore.runClasses(MyMathTest.class); // MyMathTest - файл с тестами, через запятую можно указать сразу несколько
        for(Failure failure: result.getFailures()) {
            System.out.println(failure.toString());
        }
        }
