1. Поразрядные операции выполняются над целочисленными типами (включая char)
2. Поразрядные операции - это операции которые воздействуют на двоичные разряды операндов.
3. Все целочисленные числа представлены двоичными числами разной длины.
4. Старший двоичный разряд определяет знак целого числа
5. Компьютер не умеет отнимать, вычитание происходит за счет сложения отрицательного числа.
6. Чтобы получить отрицательное число из положительного в двоичном виде, нужно инвентировать все разряды положительного числа и прибавить 0000 0001 (единицу)
7. Перевод положительного числа в отрицательное путем инвертирования разряда и прибавления единицы называется дополнительным кодом.
8. Поразрядное НЕ ~ инвертирует все двоичные разряды операнда, например: ~0010 1010 == 1101 0101
9 Поразрядное И & дает все нули, кроме 1&1 (дает 1)
10. Поразрядное ИЛИ | дает все 1 кроме 0&0 (дает 0)
11. Поразрядное исключающее ИЛИ ^. Если 0^1 или 1^0 дает 1, если 1^1 или 0^0 дает 0
12. Сдвиг влево имееет вид: значение << количество. При этой операции все биты сдвигаются влево, при этом старшие биты в левой части, которые выходят за диапазон значений типа отбрасываются, а справа дополняются нулями.
13. Каждый сдвиг влево на одно значение удваивает исходное значение.
14. Сдвиг вправо имеет вид значение >> количество. При этом младшие биты в правой части удалятся.
15. При выполнении  операции сдвига вправо старшие двоичные разряды на крайних слева позициях освобождаются и заполняются предыдущим содержимым старшего двоичного разряда???
16. При сдвиге на одно значение вправо происходит деление исходного числа на 2 с отбрасыванием остатка.
17. При беззнаковом сдвиге вправо в старший разряд записывается ноль.
18. Логические операции выполняются только с булевскими операндами
19. Логические операции & | ^ взаимодействуют с булевыми операндами, так же как и с разрядами двоичных значений.
20.






/////////////////НЕ ПОНЯЛ//////////////
У Шилда написано, что в Java так писать не правильно, но код компилируется и выполняется.
        boolean done = true;
        if(done) {
            // some code
        }

////////////////////НЕ ПОНЯЛ///////////////////
1. Как различать в двоичном представлении когда число просто положительное число например 1111 1000 == 248 и то же число в дополнительном коде может быть 1111 1000 == - 8 ? Например если я хочу сложить 248 + 248, получается, что это операция в с двоичными операндами может оказаться сложением -8 + (-8) ?