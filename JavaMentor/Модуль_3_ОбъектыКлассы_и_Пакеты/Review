Перед ревью, проверьте себя по контрольным вопросам:
1) что такое ООП.
2) принципы ООП
3) Модификаторы доступа
4) Указатели this и super.
5) Модификатор static
6) Наследование и реализация.
7) Интерфейсы.
8) Анонимные классы.
9) Класс Object и класс Class.
10) Контракт между  equals() и hashCode().

Из коментариев
3) Про Хэшкод и Эквалс (важная тема)
Вот очень годный список вопросов-ответов по теме: http://javastudy.ru/interview/java-oop/ Лучшего не нашел.

=====для чего нужны дефолтные методы в интерфейсах=====
Там суть следующая. Ты написал интерфейс, его используют много программистов и написали много классов его реализаций. Потом, ты вдруг понимаешь, что в интерфейс нужно добавить декларацию нового метода. И если ты просто бы исправил свой интерфейс, то все классы которые его реализуют перестали бы тут же компилироваться, и вываливались с ошибкой требуя реализации этого метода. Поэтому сделали возможность создавать дефолтную реализацию метода прямо в интерфейсе, чтобы худо бедно, всё продалжало работать, как минимум компилироваться. И постепенно, каждый класс реализующий интерфейс должен сделать реализацию этого метода в соответствии со своей логикой

================Ещё вопрос, а интерфейсы могут иметь вложенные интерфейсы?===============

===============вопросы к ревью по 3му блоку======================
- как реализована неизменность в String?
- как реализовать свой immutable тип данных?
- зачем нужен метод finallize?
- зачем реализовывать интерфейс интерфейсу?
- класс Object все методы кроме wait, notify, notifyAll назвать и объяснить как работают.
- из-за чего происходят коллизии, почему нельзя гарантированно написать хэшкод без коллизий?
- Может ли быть абстрактный класс без абстрактных методов?
- может ли быть конструктор у абстрактного класса для чего?

============что такое инкапсуляция?==========
инкапсуляция это одна из парадигм ООП согласно  которой во-первых данные и реализация помещаются внутри одной информационной единицы (объекте), во-вторых эти данные и реалиазция делаются скрытыми от внешних вызовов за счет модификаторов доступа и гетеров/сеттеров

=============1. Могут ли в языке Java у абстрактного класса быть конструкторы?==============
Да, в абстрактном классе в Java можно объявить и определить конструкторы. Поскольку создавать экземпляры абстрактных классов нельзя, вызвать такой конструктор можно только при формировании цепочки конструкторов, то есть при создании экземпляра конкретного класса-реализации. Но представьте, что интервьюер задаст затем вопрос: а какой смысл в конструкторе, если создать экземпляр абстрактного класса все равно нельзя? Дело в том, что его всё равно можно использовать для задания начальных значений общих переменных, объявленных в абстрактном классе и используемых различными реализациями. Даже если вы не объявили никакого конструктора, компилятор добавит в абстрактный класс конструктор по умолчанию без аргументов. Без него ваш подкласс не скомпилируется, поскольку первый оператор в любом конструкторе представляет собой неявный вызов super() – конструктора суперкласса по умолчанию в языке Java.



==========================вопросы по 3 модулю==================
1. что такое ООП?
2.что такое абстракция?
Абстракция это возможность описать объект в программе вычленнив из множества его признаков несколько ключевых, которых достаточно для общего представления об объекте.
3. что такое инкапсуляция?
4. что такое полиморфизм?
5. что такое наследование?
Наследование - способность системы описать новый класс на основе существующего с частично или полностью унаследованной функциональностью.

6. перегрузка метода в Java?
Создание метода с тем же именем но разным набором параметров.

что можно менять при перегрузка?
можно ли менять возвращаемый тип значения?
перегрузка применима только к методам? (к конструкторам тоже)
что такое переопределение метода?
что можно делать а что нет при переопределении метода? можем только сужать тип параметров (нельзя наследнику кинуть предка)
что такое this ? к чему можно обращаться
что такое Object? (базовый класс java от которого образуются другие классы)
методы класса object - equals getclass clone finalize to string
для чего нужен finalize - для сбора мусора,
какие рекомендации для использования метода finalize
что такое static и что может быть static
почему статиком не может быть класс верхнего уровня?
можно ли вызывать в статическом методе нестатические? нет static во время компиляции, обычные в runtime
как выйти из ситуации когда из статическом методе необходим доступ до нестатического метода
что такое final
если final стоит на поле? если поле ссылочного типа что нельзя менять
если у нас поле final это массив ? что мы можем менять а что нет
final на методе что это значит?
если final на классе?
можно ли не в статическом методе вызвать статический?
модификаторы доступа?
public - область видимости - из всей программы
protected - внутри класса и наследники, внутри пакета
default - доступ пакетной видимости, внутри класса без наследников
что такое констуктор - это метод класс для создания объекта классса
нужно ли создавать конструктор если мы не хотим передавать туда никаких значений
а если напишем свой конструктор который принимает параметры, будет ли констуктор по умолчанию существовать
можно ли в классе вызвать один конструктор из другого? да через this
как вызвать конструктор родителя?
что такое пакет? папка которая объединяет с логической точки зрения все классы
какую проблему решают пакеты?
что такое класс?
что такое объект ? это экземпляр класса с определенным состоянием, характеристиками и поведением.
в чем разница instanceof и getclass? getclass в equals почему рекомендуется использовать - instanceof вернет true даже если будет предок
контракт equals и hashCode?
    вызов метода hashCode один и более раз над одним и тем же объектом должен возвращать одно и то же хэш-значение, при условии что поля объекта, участвующие в вычислении значения, не изменялись.
    вызов метода hashCode над двумя объектами должен всегда возвращать одно и то же число, если эти объекты равны (вызов метода equals для этих объектов возвращает true).
    вызов метода hashCode над двумя неравными между собой объектами должен возвращать разные хэш-значения. Хотя это требование и не является обязательным, следует учитывать, что его выполнение положительно повлияет на производительность работы хэш-таблиц.
контракт equals?
  Рефлексивность
  для любого заданного значения x, выражение x.equals(x) должно возвращать true.
  Заданного — имеется в виду такого, что x != null
  Симметричность
  для любых заданных значений x и y, x.equals(y) должно возвращать true только в том случае, когда y.equals(x) возвращает true.
  Транзитивность
  для любых заданных значений x, y и z, если x.equals(y) возвращает true и y.equals(z) возвращает true, x.equals(z) должно вернуть значение true.
  Согласованность
  для любых заданных значений x и y повторный вызов x.equals(y) будет возвращать значение предыдущего вызова этого метода при условии, что поля, используемые для сравнения этих двух объектов, не изменялись между вызовами.
  Сравнение null
  для любого заданного значения x вызов x.equals(null) должен возвращать false.
что такое коллизия для hashCode
  когда объекты разные но показывает одинаковый hashcode. hashCode привязан к int если происходит переполнение по количеству объектов,
  если неверно написано вычисление hashCode
когда сравниваем объекты через двойное равно что мы сравниваем?
что означает анотация Override?
можно понять что не происходит переопределения если у родителя или наследника поменялся метод и не совпадает сигнатура метода
в какой области памяти хранятся примитивы?  стек
в какой области хранятся объекты? - куча
что такое var args? - параметр произвольной длины, устанавливается в конце перечисления всех параметров
что такое абстрактный метод?
абстрактный метод может быть только в абстрактном классе ? еще и в интерфейсе
абстрактный класс? - не может иметь экземпляра но может быть унаследован
констуктор абстрактный класс может иметь? да но только в наследнике
может абстрактный класс может быть без абстрактных методов? может
что такое интерфейс?
зачем нужен интерфейс если есть абстрактный класс? у интефейсов нет состояний
когда лучше использовать интерфейс а когда абстрактный класс?
  если тесная связь то абстрактный класс, а если нет особой связи то интерфейс
назови 5 отличий интефейса от абстрактного класса? - наследование:
  интерфейсов сколько угодно, абстрактный класс - один, у интерфейса нет полей(но с 8 явы есть public static final)
  в абстрактном классе может быть описано тело метода - в интерфейсе нет
  в абстрактных классах могут быть конструкторы
  у интефейса только Public модификатор методов

можно ли создавать static методы в интерфейсе?
    можно но только должны быть сразу реализованы
могут ли быть поля в интерфейсе?
  да только public static final
что такое нативные методы?
какие плюсы и минусы
минусы - скрыта реализация не можем воздействовать
где хранятся ссылки на объекты? - стек
для чего созданы default методы в интерфейсе?
    при добавлении нового функционала в программу не делает необходимости в переопределении нового функционала
    во всех участках где используется интерфейс
что такое ранее и позднее связывание?ы
  ранее связывание - на этапе компиляции
  позднее - на этапе выполнения
что такое Enum? класс с конечным набором параметров
методы Enum?
 values, ordinal, name
Может ли  Enum наследовать (implement) интерфейс в Java?
Да, Enum может наследовать интерфейсы. Поскольку Enum тип схож с классом и интерфейсом, он может наследовать интерфейс. Это даёт поразительную гибкость в использовании Enum в качестве специальной реализации в некоторых случаях. Вот неплохой пример использования Enum в таком качестве.
Может ли Enum наследовать (extends) класс?
Нет, не может! Неожиданно, поскольку ранее говорилось что Enum тип похож на класс или интерфейс в Java. Ну, это главная причина, почему такой вопрос задают сразу за предыдущим. Поскольку Enum уже наследуется от абстрактного класса java.lang.Enum, понятно, что другой класс наследовать не удастся, поскольку Java не поддерживает множественное наследование классов. Благодаря наследованию от java.lang.Enum, все перечисления имеют методы ordinal(), values() или valueOf().
требования к конструктору в Enum? должен быть private


//////////////ТЕОРИЯ////////////
1. Абстрактные классы могут реализовывать интерфейсы. В случае если абстрактный класс реализует не все методы указанные в интерфейсе, то эти методы должны быть реализованы в классах наследниках.


///////////////ПОВТОРЕНИЕ/////////////////////
1. Что такое абстракция?
Абстракция это выделение  общих харакетристик  объекта и исключение второстепенных

2. Что такое final? Что может быть final? Как они работают?
final это ключевое слово, оно применяется к переменным методам и классам. Для класса это означает, что от класса нельзя наследоваться. Для метода, что он не может быть переопределен в наследниках. Для переменных, что она может быть инициализирована один раз (при этом для ссылочных переменных это означает, что такая переменная всегда будет ссылаться на один объект, при этом можно менять состояние объекта)

3. Назовите контракт между equals и hashcode?
контракт equals:
1. x.equals(x) == true; // рефлексивность
2. если x.equals(y) , то y.equals(x) // симетричность
3. если x.equals(y) и y.equals(z) то z.equals(z) // транзитивность
4. повторный вызов x.equals(y) будет возвращать значение предыдущего вызова // согласованность
5. x.equals(null) возвращает false // сравнение null
контракт hashcode
1. вызов hashcode для одного и того же объект должен возвращать одно и то же значение hashcode
2. вызов hashcode над двумя объектами всегда  возвращает одно и то же число если объекты равны с точки зрения equals
3. вызов hashcode на двумя разными объектами всегда возвращает разные значения.

4. В каких случаях стоит использовать интерфейс, а в каких абстрактный класс? Привести несколько примеров.
- когда предполагается какая то доработка, то поскольку в опубликованный интерфейс проблематичено добавить новый метод, то лучше предпочесть абстрактный класс.
- если интерфейс содержит слишком много методов, то их реализация может быть слишком затратой, тогда лучше выбрать абстрактный класс.

- Интерфейс описывает только поведение, у абстрактного класса есть и поведение и состояние
- Абстрактный класс связывает между собой классы имеющие между собой много общего, например абстрактный класс птица, от которого будут наследоваться классы воробей, чайка, ворона. Интерфейс могут реализовывать классы у которых нет между собой ничего общего, например интерфейс flyable могут имплементить класс муха и класс самолет
- реализовать можно сколько угодно интерфейсов наследоваться только от одного
- Абстрактные классы призваны предоставлять базовый функционал для классов-наследников. А производные классы уже реализуют этот функционал.

Отличие абстрактного класса от интерфейса:
1. Ключевое слово при определении abstract vs default
2. наследование и реализация extends vs implements
3. В AK разрешен конструктор в интерфейсах нет.
4. Поля в АК static, non-staic, final, non-final. В интерфейсе все поля public static final
5. модификаторы доступа у членов АЛ любые, у интерфейса только public

5. Для чего нужна аннотация Overide
Анотация служит для контроля успешности переопределения метода

6. В какой области памяти хранятся примитивы?
В стэке

7. Что такое varargs? Какие есть ограничения при написании?
- параметр должен быть один
- он должен указываться последним

8. Закончив переопределение метода equals каким четырём условиям должен удовлетворять данный метод?
см. контрак equals

9. Перечислите методы именно класса Enum?
.name() возвращает имя перечисления
.ordinal() порядковый номер перечисления
.values() получить массив всех значений перечисления
.valueOf() получает значение перечисления по строковому представлению

10. Может ли Enum имплементировать интерфейсы?

//////////////////ВОПРОСЫ ДЛЯ ПОВТОРЕНИЯ///////////////
1. Что будет если передать массив в метод, который изменит его значения, изменятся ли они вне метода? Почему? А если передать примитив?
Да изменятся, потому что в параметры методу передается ссылка на массив и изменения внутри метода будут производится с тем же массивом на который указывает переданная в метод ссылка.

2. Класс Object, все методы кроме wait, notify, notifyAll, назвать и объяснить, как работают
Методы класса Object:
.toString() - возвращает строковое представление объекта
.hashcode() - возвращает целочисленное представление объекта
.clone() - создает копию объекта со всеми его членами
.getClass() - возвращает класс объекта в runtime
.equals() - возвращает результат сравения полей объекта
.finalize() - служит для автоматического освобождения системных ресурсов, занимаемых объектом

3. что возвращает getClass
возвращает класс объекта в runtime

4. Какие методы в интерфейсе могут иметь реализацию?
- default и static методы

5. Синтаксические отличия интерфейса от абстрактного класса (АК)? 5 отличий
- abstract vs interface
- extends vs implements
- В АК разрешен конструктор, в интерфейсах - нет
- в АК поля могут быть static и non-static, final и non-final. В интерфейсах все поля public static final
- В АК модификаторы доступа у членов могут быть любыми, у интерфеса все члены public