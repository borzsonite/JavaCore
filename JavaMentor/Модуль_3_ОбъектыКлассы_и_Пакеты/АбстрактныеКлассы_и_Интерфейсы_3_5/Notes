1. Сигнатура абстрактного класса такая же как у обычного класса, только после модификатора доступа или на превом месте указыввает деректива abstract

2. Если класс объявлен абстрактным, то создать его экземпляр невозможно, только экземпляр класса наследника

3. В абстрактном классе все может быть как в обычном: конструкторы, поля, методы, но некоторые методы могут быть абстрактными (т.е. без реализации в {} (без тела))

4. Сигнатура абстрактного метода: модификатор_доступа abstract тип_возвращаемого_значения имя_метода(), например: public abstract double getArea();

5. Все неабстрактные наследники должны реализовать абстрактные методы базового класса.

6. Абстрактные методы допустимы только в абстрактных классах.

7. Абстрактные классы решают две задачи: 1. Определяют набор методов которые должны быть реализованы в наследниках. 2. Могут сами содержать некоторую реализацию в виде обычных полей и методов.

8. Если класс применяет интерфейс то он должен реализовать все методы указанные в интерфейсе

9. Если класс не реализует какие то методы интерфейса, то он должен быть объявлен абстрактным, а реализация методов интерфеса должна быть выполнена в наследниках абстрактного класса. (см. Printable, Test1, Test2)

10. Все методы интерфейса публичные и абстрактные, поэтому при объявлении метода явно указывать этого не нужно.

11. Поля в интерфейсе только static final, public. Ничего непубличного объявить в интерфейсе нельзя.

12. Имплементить можно сколько угодно интерфейсов и одновременно наследоваться от класса.

13. Существуют так называемые функциональные интерфейсы т.е. содержащие только один абстрактный метод.

14. В интерфейсах не может быть реализации методов. Поэтому указываются только их сигнатуры.

15. Сигнатура имплиментируемого метода должна совпадать с сигнатурой в интерфейсе.

16. В двух словах в интерфейсе перечисляются методы, которые обязательно должны быть реализованы в классе реализующем интерфейс.

17. Интерфейс определяет то, что класс умеет делать, а абстрактный класс определяет то чем класс является. Например:  класс имплиментрующий итерфейс runable должен уметь бегать те. иметь МЕТОД run(), а класс наследующися от абстрактного класса Animal является животным (Dog extends Animal)

//////////////////////////////ВОПРОСЫ////////////////////////////
1. Какая сигнатура у абстрактного класса?
2. Можно ли создать экземпляр абстрактного класса?
3. В чем отличие абстрактного класса от обычного?
4. См. 1.
5. Что должны делать неабстрактные наследники абстрактного класса?
6. Где можно определять абстрактные методы?
7. Какие две задачи решают абстрактные классы?
8. Что должен делать класс применяющщий интерфейс?
9. Что необходимо сделать с классом если он реализует не все методы интерфейса? Что должно быть проделано в классах наследниках абстрактного класса.
10. Какие модификаторы у методов интерфейса?
11. Какие модификаторы у полей интерфейса? Можно ли поле интерфейса объявить private?
12. Какое количество интерфейсов можно реализовывать одновременно? Можно ли одновременно реализовывать интерфейс и наследоваться?
13. Что такое функциональный интерфейс?
14. Может ли в методах интерфейса быть какая-то реализация?
15. С чем должна совпадать сигнатура метода в классе реализующем интерфейс?
16. Для чего нужны интерфейсы?
17. В чем разница между интерфейсом и абстрактным классом?
