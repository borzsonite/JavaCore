1. ООП это парадигма программирования в которой программа состоит из объектов взаимодействующих друг с другом посредством обмена сообщениями.
2. Объект может принимать сообщения, в джава отправка сообщений объекту реализована как вызов методов этого объекта.
3. Каждый объект относится к какому либо типу, другими словами является экземпляром класса.
4. Класс это общее описание того как устроена сущность, например, Класс клиент должен иметь имя, пол, возраст, номер счета итп, а объект это конкретный экземпляр класса с конкретным состоянием полей.
5. Набор методов у объекта определяется исходя из предметной области в которой это объект существует, например у объекта Заказ могут быть методы: оплатить, доставить, отменить, оставить отзыв итд.
6. Инкапусляция это одна из парадигм ООП, согласно  которой: 1. данные и реализация помещаются внутри одной информационной единицы (объекте); 2. эти данные и реалиазция делаются скрытыми от внешних вызовов за счет модификаторов доступа и гетеров/сеттеров
7. При наследовании класс-наслденик получает все признаки базового класса, которые могут дополняться новыми свойствами, а также быть изменены или переопределены.
8. Код выполняемый при вызове метода объекта определяется классом объекта вызывающего этот метод, это называется полиморфизмом.
8еще. Полиморфизм это  когда реализация метода, выполняемая при его вызове определяется исходя из класса объекта у которого был вызван данный метод.
9. Пакеты в джава задают область видимости классов. Классы из одного пакета могут обращаться друг к другу по короткому имени (состоящему только из имени класса, без пакета). Классы из других пакетов должны либо использовать полноем имя (имяПакета_имяКласса) либо использовать директиву import
10. Импортировать можно как отдельный классы, так и все содержимое пакета: import имяПакета.*
11. Классы пакета java.lang всегда доступны по коротким именам, т.к. неявно импортируются.
12. Директива import static позволяет импортировать статические поля и методы, т.е. к ним можно будет обращаться без указанния имени класса, например после import static java.lang.Math.sqrt можно писать не Math.sqrt(4), a sqrt(4) или вместо System.out.println()   out.println(). Можно импортировать сразу все статические поля и методы, например import static java.lang.Math.*
13. Пакеты при помощи модификаторов доступа позволяют ограничивать доступ к содержимся в них классам, полям и методам в пределах пакета, т.е. можно запретить доступ извне пакета.
14. Модификаторы доступа устанавают уровень доступа к классам их полям и методам.
15. Существует 4 типа доступа:
    - public - доступ отовсюду.
    - protected - доступ в пределах пакета и из классов наследников
    - default - доступ в пределах пакета
    - private - доступ только в пределах класса.
16. Модификаторы protected и private не  применимы к классам верхнего уровня.

17. Каждый экземпляр класса содержит копии определенных в нем полей и методов.
18. Если в файле находится несколько классов, название файлу следует давать по имени класса в котором находится метод main(). При компиляции для каждого класса будет создан свой файл с расширением .class.
19. При создании класса создается новый тип данных, которые можно использовать при объявлении экземпляров класса.
20. Оператор new резервирует память для объекта и возвращает ссылку на адрес в памяти, которая затем может быть записана в переменную типа класса.
21. Общая форма объявления метода выглядит так:

    тип_возвращаемого_значения имя_метода(параметры) {
        //тело метода;
    }

22. Если доступ к переменной или методу объекта совершается из кода не входящего в класс, где определенны члены класса, следует указывать объект с помощью точки, если доступ осуществляется из кода входящего в класс объект указывать не нужно.
23. Написание программы в стиле ООП это когда программа разбита на множество узкоспециализированных классов, слабосвязанных между собой и выполняющих одну конкретную задачу.

24. При наследование Class B extends Class A и Class C extends Class B, Class C будет содерждать в себе поля и методы обоих родителей.

25. Из нестатиченого метода доступны и статичные и нестатичные переменные, из статичного метода только статичные.

26. Если в классе имеются перегруженные конструкторы, то конструктор по умолчанию становится недоступным, но его можно прописать самостоятельно.

27. Если Есть родитель Pet и наследник Cat, то если сослать экземпляр Сat на родителя: Pet cat = new Cat();,  то cat будут доступны только методы родителя - Pet. При этом в случае если в потомках переопределить методы родителя, то будут вызываться методы потомка (полиморфизм).
    // В случае Cat cat = new Cat() доступны все методы как родителя, так и потомка.


///////////////////////////////ВОПРОСЫ/////////////////////////////
1. Что такое ООП?
2. Что может делать объект в контексте ООП? Как в джава реализована отправка сообщений объекту?
3. Что означает: объект является экземпляром класса?
4. Что такое класс и объект в парадигме ООП?
5. Исходя из чего определяется набор методов у объекта?
6. Что такое инкапсуляция?
7. Что получает класс наследник от базового класса? Можно ли дополнять наследника новыми свойствами и переопределять полученные от базового?
8. Что такое полиморфизм?
9. Что задают пакеты в джава? Как должны обращаться друг к другу классы из разных пакетов? из одного пакета?
10. Что означает директива import? Можно импортировать отдельный класс пакета? Все классы пакета?
11. Классы какого пакета всегда доступны по коротким именам. Что это означает?
12. Какая директива позволяет импортировать стические поля и методы класса?
13. Как можно ограничить доступ к классам, полям и методам пределами пакета?
14. Для чего нужны модификаторы доступа?
15. Какие виды модификаторов доступа существуют?
16. Какие модификаторы не применимы к классам верхнего уровня?
17. Копии чего содержит каждый экземпляр класса?
18. Какое имя следует дать файлу в котором находится несколько классов? Что будет создано при компиляции для каждого класса?
19. Что создается при создании класса?
20. Что делает оператор new?
21. Как выглядит форма объявления метода?
22. Что нужно сделать если доступ к члену класса производится не из класса в котором определены данные члены?
23. В чем суть написания программы в стиле ООП?





