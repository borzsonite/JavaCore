1. Принадлежность класса к пакету обозначается директивой package
2. Деректива package идет первой строкой в коде класса. Перед ней могут быть только комментарии
3. Полное имя класса состоит из имени пакета и через точку название класса. При запуске программы через коммандную строку необходимо указывать полное имя класса.
4. Если деректива package отсутствуюет полное имя класса совпадает с его коротким именем.
5. Пакет задает облость видимости класса. Классы находящиеся в одном пакете могут обращаться друг к другу по короткому имени. Классы из других пакетов должны или использовать полное имя класса или использовать директиву import.
6. Импортировать можно либо конкретный класс (import java.util.logging.Logger), либо все содержимое пакеа сразу (import java.util.logging.*)
7. Классы из пакета java.lang (Integer, String, System) импортируются самостоятельно, т.е. не нужно специально писать java.lang.* это делается неявно.
8. Директива import static позволяет импортировать статические поля и методы, например: import static java.lang.Math.sqrt это позволяет обращаться к этим полям и методам по короткому имени (без указания имени класса) например sqrt(4), или вместо System.out.println("Hello") писать out.println("Hello").
9. Можно также делать статический импорт всех полей и методов класса: import static java.lang.Math.*
10.  /src
        /util
           Foo.java
           Bar.java
        Main.java
     При такой иерархии класс Main принадлежит пакету по умолчанию, а классы Foo, Bar пакету util, при этом класс Main не доступен из классов Foo, Bar
11. Классы из стандартной библиотеку java находятся в пакетах с префиксами java. и javax. Например java.lang, java.util, java.io, javax.xml
12. Пакеты принято именовать в соответствии с доменой структурой организации или проекта, например org.stepik.java или com.google.common, com.intellij.idea
13. Помимо предотвращения коллизии имен и задания области видимости, пакеты служат для группировки связанных классов внутри программы.
14. В джава есть 4 типа доступа: public - разрешен доступ отовсюду без ограничений, protected - доступ разрешен только для классов наследников и для классов пакета, без модификатора (дефолтный) - доступ в пределах пакета, private - доступ внутри класса
15. Модификаторы protected, private не приминимы к классам верхнего уровня. Их можно применять к вложенным классам.
16. Если неизвестно какой модификатор использовать, то лучше поставить более строгий.
17. Если пакеты вкладываются один в другой это не дает им особых прав доступа к содержимому друг друга, поэтому для использования коротких имен классов из разных вложенных пакетов требует либо полного имени, либо директивы import.


//////////////////////static/////////////////////
18. Модификатор static указывается в т.ч. для класса, но только в случае если класс вложенный.
19. К статическому полю можно обратиться как через объект, так и через класс, например
obj.staticVar, Class.staticVar
20. К нестатическому полю обратиться можно только через объект - obj.notStaticVar. Через класс обращаться к нестатической переменной нельзя Class.notStaticVar - не работает!
21. static переменная является общей для всех объектов класса, а notstatic, у каждого объекта своя.
22. Константы необходимо объявлять как static final.
23. К статическим методам, также как и к статическим переменным можно  обращаться и через имя класаа и через имя объекта, к нестатическим методам - только через имя объекта.
24. Поскольку статический метод один для всех экземпляров класса, то его нельзя переопределять в наследниках.
25. Поскольку к статическому методу можно обращаться без создания объекта, в случае если в классе содержаться не статические переменные из статического метода может произойти обращение к таким переменным, которые без объекта не существуют. Поэтом в java запрещено обращение из статического метода к нестатическим переменным.

///////////////////////////////////////ВОПРОСЫ/////////////////////////////
1. Чем обозначается принадлежность класса к  пакету?
2. Что может быть указано в коде класса перед дерективой package?
3. Из чего состоит полное имя класса?
4. Как выглядит имя класса при отсутствии дерективы package?
5. Что задает пакет. Как могут обращаться друг к другу классы одного пакета? Какие два способа обратиться к классу из другого пакета?
6. Какие существуют два способа импортирования классов?
7. Почему не нужно указывать импорт классов (Integer, String, System) из пакета java.lang?
8. Для чего служит директива import.static?
9. Какая директива позволяет выполнить статический импорт всех статических полей и методов в классе?
10. Что такое пакет по умолчанию, как обратиться к классу находящемуся в пакете по умполчанию из другого пакета?
11. Какой префикс у классов стандартной библиотеки java?
12. Какие правила действуют при выборе имени пакета?
13. Для чего еще служат пакеты?
14. Какие виды доступа существуют в джава?
15. Какие модфикаторы не применимы к классам верхнего уровня, к каким классам их можно применять?
16. Какой модификатор лучше использовать, если сомневаешься в выборе?
17. Можно ли обратиться по короткому имени к классу из пакета верхнего уровня из подпакета?
18. Может ли модификатор static указываться для класса?
19. Как можно обратиться к статическому полю?
20. Как можно обратиться к нестатическому полю. Можно ли сделать это через Имя класса?
21. Какая переменная является общей для всех объектов класса? Какая своя у каждого объекта?
22. Как следует объявлять константы?
23. Можно ли обратиться к статическому полю через имя объекта?
24. Почему нельзя переопределить статический метод в классе наследнике?
25. Почему в джава запрещено обращение из статического метода к нестатическим переменным?


