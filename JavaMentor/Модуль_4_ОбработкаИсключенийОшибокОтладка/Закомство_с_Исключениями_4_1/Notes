1. Исключение - событие которое происходит в ходе выполнение программы и прерывает ее стандартный ход исполнения. При этом программа переходит в специальный режим поиска обработчика нестандартной ситуации. Обработчик может предпринять какие-то действия и вернуть программу в штатный режим.

2. Исключения это экземпляр класса-исключения. При возникновении исключения создается объект описывающий данное исключение.

3. Все исключения наследуются от java.lang.Throwable, который наследуется от Object

4. Ключевое свойство экезмпляра Throwable быть брошенным (throw new typeOfException)

5. Исключения делятся на 3 группы: Error, Exception (checked или compileTime exception), RunTimeException (unchecked или runTimeException)

6. Error и Exception наследуются от Throwable, RunTimeException от Exception

7. Error - ошибка JVM, их не надо обрабатывать т.к. помочь JVM скорее всего не получится.

9. Exception и RunTimeException ошибки на уровне программы которые можно пытаться обрабатывать.

10. Если в методе указывается, что он выбрасывает исключение throw new Exception.., то нужно чтобы в методе был обработчик этого исключения try { } catch { }, или чтобы в сигнатуре метода было указано что он выбрасывает такое исключение: throws Exception. Exception проверяются компилятором. В сигнатуре метода можно указать несколько выбрасываемых исключений через запятую.

11. Если метод выбрасывающий исключение вызвается из другого метода, то в объявлении такого метода также должно быть указано throws Exception.

12. checked exception должны быть задекларированы в сигнатуре метода.

13. Для unchecked exception декларировать exception в  сигнатуре метода (throws) не требуется.

14. При создании собственного исключения оно декларируется как обычный класс:

    public class MyException extends RunTimeException {
        public MyException (String message) {
            super(message);
        }

        public MyException (String message, Throwable cause) {
             super(message, cause);
        }
    }

15. При создании собственного исключения выбор того будет ли оно checked или unchecked - дело вкуса.

16. При наследовании или реализации интерфейса, в переопределяемом методе нельзя декларировать больше исключений чем у базового метода (можно меньше)

17. В случае наступления ошибки выбрасывается объект наследующийся от класса Error, Exception, RunTimeException (IOExcepton, NullPointerExctpion итд). Походу По сути создаётся объект класса (Exception, RunTimeException).

19. По сути в блоке try { } выбрасывается объект класса Exception или RunTimeException?  который ловится в блоке catch {FileNotFoundException exObj }, далее у экземпляра класса вызывается какой-нибудь метод, например exObj.printStackTrace();

20. Если в блоке try {} выбрасывается исключение, то весь код который написан в этом блоке после того места в котором было выброшенно исключение игнорируется и выполнение программы переходит в блок catch{}

21. Если исключение в блоке try {} не  выбрасывается, то весь код в блоке try {} выполняется, а блок catch {} игнорируется.

22. После обработки исключения в блоке catch{} программа продолжит свою работу.

23. Исключение выбрасывается посредством throw new TypeOfException(); При выбрасывании исключения его нужно либо задекларировать в сигнатуре метода , либо обработать в блоках try catch.

24. Для создания собственного вида исключения нужно создать класс с соответствующим именем унаследовав его либо от Exception, либо от RunTimeException.
    class myException extends Exception { // наследуемся от Exception
        public myExcepiton(String message) { // определяем конструктор класса
            super(message)
        }
    }
Если в конструктор исключения будет передаваться параметр, (сообщение) то в конструкторе необходимо вызвать конструктор суперкласса с этим параметром.

25. Если метод выбрасывает несколько исключений для их обработки можно использовать несколько блоков catch {}

26. MultiCatch, в  одном catch блоке обрабатывается несколько исключений:
    catch(IOException | NullPointerException e) {
    e.printStackTrace();
    }

27. Если в блоке catch ловится родитель всех Exceptions, то последующее указание блоков catch не имеет смысла т.к. все исключения попадут в первый блок catch
    catch(Exception e) {
    e.printStackTrace()
    } catch (IOException) { // этот блок не имеет смысла тк. все отловилось выше.
    }

28. catch (Throwable t) поймает все ошибки, включая Errror

29. После catch может быть еще один блок - finaly {} он выполняется в любом случае, было исключение или нет.

30. finaly исполняется последним. Он служит обычно для закрытия ресурсов, сняти блокрировок.

31. Для решения проблем с исключениями в блоке finaly, при котором блок final также может выкинуть исключение которое затрет исключение из блока try используется try c ресурсами.

32. try c ресурсами имеет следующую сигнатуру try(ресурс) {}

33. try c ресурсами гарантирует, что каждый ресурс указаный в () будет закрыт, т.е на ресурсе будет вызван метод close - ресурс.close();

34. При использовании try(с ресурсом) ресурс будет закрыт в любом случае, было исключение или нет.

35. Исключение из close() не перебивает исходное исключение из try a добавляется к нему в качестве заглушенного (supressed)

36. Ресурс это любой объект реализующий интерфейс AutoCloseable, если реализовать этот интерфейс в собственном классе, то такой класс можно использовать в try c ресурсом.

37. Блок finaly не будет выполнен в случае: System.exti(); Если JVM упадет раньше; если в try или catch блоках случится бесконечный цикл

38. Закрытие ресурса открытого в блоке try путем вызова метода close() в блоке final нежелательно тем, что в случае если метод close тоже выбросит исключение, то оно перезатрет то, что было выброшено в блоке try.

39. Нерпроверяемые исключения Error, RunTimeException не подсвечиваются компилятором.

40. Непроверяемые исключения возникают уж в ходе выполенения программы (RunTimeException) или если что-то происходит на уровне JVM (Error)

41. Если тип выбрасываемого в блоке try исключения неизвестен, то ловить можно  родителя всех исключений - exception. catch(exception e)

42. unchecked exception (деление на ноль, выход за пределы массива и др. простые ошибки) лучше обрабатывать при помощи if

43. Если в блоке try вылетает исключение, то выполнение программы переходит в блок catch, все что было написано в блоке try после кода выбросившего исключение игнорируется.

44. После выполнения кода в блоке catch программа продолжит выполнение работы.

45 Если в блоке try исключение не было выброшено,  блок catch игнорируется и программа продолжает выполнение после него.

46. Если один оператор try вложен в другой try и во внутренем try не находится обработчика для вылетевшего исключения, поиск обратчика продолжается в следующем внемшнем catch, если обработчик не находится и там, исключение ловиться стандартным обработчиком java

47. Получить объет класса Throwable можно двумя способами - указав этот объект в параметрах catch или с помощью new (throw new)

48. оператор throw позволяет может выбрасывать объект исключения как ранее сгенерированный (trow exception), так и создавая новое исключение (throw new exception(); )

49. Разница между декларированием исключения и обработкой его блоком try/catch в том, что при декларировании метод просто выбросит ошибку и прекратит работу программы, а после обработки в try/catch выполнение программы продолжится.

50. Оператор finally указывать не обязательно, но для блока try обязатено указывать или catch или finally

51. Перед возвращением из метода (посредством return или через необработанное исключение) всегда выполняется finally

52. В  toString() опеделенно, что сначала выводится название исключение, потом двоеточие и в конце описание, например: java.lang.ArithmeticException: / by zero

53. Описание исключение, это то что указывается в скобках конструктора при создании: throw new exception("описание");

54. Иногда метод toString() полезно переопределить, указав для вывода только описание исключения: .getMessage().

55. Следующий пример показывает, как использовать цепочечное исключение.
    try {

    } catch (IOException e) {
        throw new SampleException("Other IOException", e);
    }
    В этом примере, когда IOException пойман, новое SampleException исключение создается с исходной присоединенной причиной,
    и цепочка исключений бросается до следующего высокоуровневого обработчика исключений.

56. В stacktrace записывается цепочка вызовов от точки входа в программу и заканчивая методом вызвашим ошибку. Для каждого вызова видно название файла и строку программы

57. У класса ислкючения есть конструктор принимающий строку-сообщение, которое будет напечатано вместе со stracktrace: throw new Exception("строка-сообщение")

58. У класса Throwable есть несколько полезных методов:
    String getMessage() // получить строку-сообщение переданное в конструктор.
    void .printStackTrace() // печть stacktrace в стандартный поток ошибок
    StackTraceElement[] .getStrackTrace // возвращает stacktrace в виде массива объектов, содержащаих имя, класса, имя метода, номер строки
    Throwable .getCause() // возвращает другое исключение явившееся причиной данного, если исключение первичное то возвращается null
    Throwable .getSupressed() // возвращате исключения которые были заглушены в процессе обработки основного ислключения.

59. Все классы исключений Throwable, Error, Exception ... находятся в пакете java.lang.

60. Если исключение не найдя обработчика вылетит из метода main JVM сама обработает ошибку напечатав stacktrace в стандартный поток ошибок и завершив программу




////////////////////////////////////ВОПРОСЫ////////////////////////////////////
1. Что происходит во время исключения. Что может вернуть программу в штатный режим после наступления исключения?
2. Чем являются исключения. Что создается при возникновении исключения?
3. От какого класса наследуются все исключения?
4. Что является ключевым свойством объекта класса Throwable?
5. Какие группы исключений  существуют?
6. От какого класса наследуются Error и Exception? От какого класса наследуется RunTimeException?
7. К ошибкам какого типа относится Error, надо ли их обрабатывать?
9. Какие ошибки можно попытаться обработать?
10. В каких случаях необходима делкарация исключения в сигнатуре метода?
11 Когда еще нужно декларировать исключение в сигнатуре метода?
12. Для каких исключений требуется декларация в сигнатуре метода?
13. Для каких исключений НЕ требуется декларация в сигнатуре метода?
14. Как создается собственное исключение?
15. От чего зависить выбор checked или unchecked исключения при его создании?
16. Сколько исключений можно декларировать в сигнатуре переопределяемого метода?
17. Что создается при наступлении ошибки?
19. Что просходит в блоках try, catch при наступлении исключения?
20. Куда передается выполение программы после наступления исключения в блоке try?
21. Что происходит если в блоке try не происходит исключения?
22. Что происходит после выполнения кода в блоке catch?
23. Какова сигнатура выбрасываемого исключения. Что необходимо выполнить при выбрасывании исключения?
24. Как создать собственное исключение? Как передать в конструктор экземпляра исключения сообщение?
25. Что следует сделать если метод выбрасывает несколько видов исключений? !!!
26. Что такое MultiCatch, какова сигнатура MultiCatch?
27. Что будет если в блоке catch указать родителя всех исключений? !!!
28. Как можно поймать ошибку типа Error?
29. Какой блок выполняется в любом случае было исключение или нет?
31. Для чего обычно используется finaly() ?
31. Какую проблему решает try c ресурсами?
32. Какая сигнатура у try c ресурсами?
33. Что гарантирует try c ресурсами?
34. При использовании try c ресурсами, в случае если исключение не было выкинуто будет ли закрыт ресурс?
35. Что присходит с исключением из close() при использовании try c ресурсами?
36. Как обеспечить использование собственного класса в try c ресурсами?
37. В каких случаях не будет выполнен блок finaly?
38. Чем опасно закрытие ресурсов путем вызова метода close() в блоке finaly?
39. Как компилятор обрабатывает нерпроверяемые исключения Error, RunTimeException?
40. Когда возникают непроверяемые исключения?
41. Как поймать ошибку если тип вырасываемого исключения заранее не известен?
42. Как лучше обрабатывать непроверяемые исключения?
43. Что происходит в блоке try после того как будет выброшено исключение?
44. Что происходит после обработки исключения в блоке catch?
45. Что происходит если в блоке try не возникло исключение?
46. Что происходит если во внутреннем try не находится обработчика исключения?
47. Сколько есть способов получить объект класса Throwable?
48. Какие исключения выбрасываются посредством оператора throw?
49. В чем разница между делкларацией исключения throws и обработкой исключения в try/catch?
50. Обязательно ли указывать блок finally, что нужно указывать для блока try?
51. Какой блок выполняется всегда перед возвращением из метода?
52. Как определен вывод сообщения исключения в toString()?
53. Где указывается описание исключения?
54. Как можно переопределить toString()?
55. Как можно пробросить цепочку исключений?
!!!56. Что записывается в stacktrace? Какая информация указывается для каждого вызова?
57. Что принимает конструктор класса исключения?
58. Какие полезные методы есть у класса Throwable?
59. В каком пакете находятся классы исключений Throable и его наследники?
60. Что будет если исключенние не найдя обработчика вылетит из метода main()?

1. https://javarush.ru/quests/lectures/questsyntaxpro.level14.lecture05

//////////////НЕ ПОНЯТНО//////////////
1. Если метод может выбросить исключение (checked) то его нужно или обработать в try/catch или задекларировать в сигнатуре метода (throws). C try/catch понятно - при выполнении исключения мы его обработали и программа работает дальше. А какой смысл декларировать исключение в сигнатре метода? Исключение при возникновении ошибки никак не обрабатывается и программа спокойно себе валится..

2. 4.1.3_03.20: Если мы пишем throw new IOExeption () stacktract определяется тем где был создан экземпляр исключения, а не тем откуда оно было выбрашено.
