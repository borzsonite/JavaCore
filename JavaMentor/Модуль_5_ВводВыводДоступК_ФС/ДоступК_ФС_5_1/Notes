1. Доступ к ФС организован через класс File в пакете java.io

2. Экземпляры класса File представляют файлы и директории на диске.
    File file = new File("C:\\dir\\filename");
    File dir = new File("C\\Path1\\Path2\\Path3");

3. Для подстановки сепаратора в строку пути лучше использовать поля класса File. File.separator или File.separatorChar

4. Для подстановки разделителя путей можно использовать поле File.pathSeparator

5. Также собрать правильный путь до файла можно передав в конструктор два параметра File(sourceDirName, fileName)
    sourceDirName = "dirName", fileName = "fileName.java"

6. .getAbsolutePath(), getAbsoluteFile() возвращают строку с абсолютным путем до файла

7. Для получения пути без точек и simlinkov используется метод getCononicalPath(File)

8. Т.к. существование объкта File не связанно с существованием фала/директории на диске. Параметр в конструкторе может указывать на несуществующий файл или директорию

9. Проверка существования файла file.exists(fileName), является ли файлом file.isFile(), file.isDirectorн()

10. Еще методы file.length() - длина файла, file.lastModified() - последняя модификация в миллисекундах с 1970 года

11. Еще методы file.list() // String[] возвращает массив строк, file.listFile() возвращает массив объектов File[]

12. Создание файла file.createNewFile()

13. Создание дирректорий file.mkdir(), file(mkdirs) // создают одну или несколько вложенных дирректорий

14. Удаление директории /файла (директория должна быть пустой) file.delete()

15. Методы копирования в классе File отсутствуют.

16. Все методы модификации файловой системы возвращают булевское значение

17. У класса File много недостатков (нет методов коприровния, не выбрасывает исключений), поэтому с 7й джава испльзуется новый интерфейс java.newio.file.Path

18. Интерфейс Path представляет собой абстракцию пути. Объект Path содержит в себе имена файлов и каталогов, которые представляют собой полный путь до файла. Path содержит методы для манипуляции с элементами пути

19. Интерфейс Path содержит 2 метода сравнения путей equals() // возвращает bolean и метод compareTo() сравнивает по символьно возвращает 0 если пути одинаковы, -1 если путь в параметрах короче и 1 если длинее.

20. При работе с классами как правило используются классы FileInputStrem и FileOutputStream, при этом используются потоки байтов.

21. FileInputStream.read() считывает один байт и возвращает его в виде int, FileOutputStream.write() записывает 1 байт

22. InputStream поток из которого можно читать, OutputStream поток в который можно писать.

23. После записи необходимо очистить буфер FileOutputeStream.flush()

23. Для работы с символами используются классы Read и Write, которые похожи на FileInputStream FileOutputStream но в отличае от них работают с символалами. У них также есть методы read(), write()

24. Path это интерфейс, paths класс с единственным методом .get()

25. Т.е походу получая в переменную типа Path путь до файла или директорию потом с этой переменной можно производить разные манипуляции: получать имя файла из пути .getFileName(), получать родительскую директорию .getParent(), нормализовать текущий путь и многое другое

26. Класс Files используется для создания, удаления и пермещения файлов и директорий.

27. Общий алгоритм работы с файлами/директориями:
1. Создается переменная типа Path path = Pathes.get("файл/директория")
2. Эта переменная передается одному из методов класса Files: Files.copy(path) //копирование файла
3. Можно записать в одну строку Files.copy(Pathes.get("файл/директория")

28. InputStream / OutputStream ориентированы на чтение/запись байтов Reader / Writer на чтение и запись символов.

29. java.io это классы InputStrem/OutputStream, Reader/Writer т.е. работа с символьными и байтовыми потоками + плюс класс File - работа с файловой системой
