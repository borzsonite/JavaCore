1. Методы работы с потоками:
    - конвеерные (возвращают поток)
    - терминальные (возвращают объект)

2. Ковеерных методов может быть сколько угодно (в т.ч. 0)

3. В общем виде работа со стримом выглядит так:
    - создается поток из источника стрима (коллекция, файл итд) при помощи метода .stream()
    - создаюется цеопочка конвеерных методов принимающих в качестве параметра лямбду
    - цепочка завершается терминальным методом
    например: students.stream().filter(student -> student.age<18)

4. Применение трансформаций к стриму не влияет на источник из которого бертся стрим

5. Стримы - набор однотипных данных, для однотипной обработки

6. Особенности стримов
    - источник создает ленивый стрим
    - промежуточные операции описывают процесс обработки, но ничего не делают
    - работа производится после вызова терминальной операции
    - может завершится за конечное время, а может быть бесконечным
    - может потребить не все элементы.

7. Стрим не является источником данных, он является интерфейсом к источнику (массив, коллекция)

8. Стрим не меняет источник

9. Промежуточные операции возвращают новый стрим

10. Стримы находятся в пакете java.util.stream. Имеется 4 класса стримов java.util.stream.Stream, java.util.stream.IntStrem, java.util.stream.LongStream, java.util.stream.DoubleStream

11. Специализированные стримы лучше использовать когда источник содержит примитивные элементы (чтобы не проводить преобразования из примитива в объект) и содержат некоторые полезные методы отсутствующие у обычного стрима, например метод .sum() у IntStream

12. Стрим можно потребить только один раз, это сделано, чтобы поддержать невозобнавляемые источники (данные из сети, генератор случайны чисел итд)

13. Источники стримов:
    - Stream.empty() - пустой стрим
    - Stream.of(x, y, z) - стрим из объектов
    - Stream.ofNullable(x) - если х == null, получается пустой стрим, иначе стрим из одного элемента х.
    - Stream.generate() - создает бесконечный стрим
    - Stream.iterate(0, x-> x+1) - созадет стрим в котором каждый последующий элемент созадется на основе предыдущего
    - colleciton.stream - создание стрима из коллекции
    - Arrays.stream(array) (int, long, double, Object) - создание из массива
    - Random.ints()/ longs() / doubles() - стрим случайных чисел
    - String.chars()  - стрим символов входящих в строку

14. Промежуточные операции:
    - .map() производит какие-то действия над элементами стрима .map(s -> s*2);
    - .distict() - оставляет в стриме только уникальные элементы
    - .sort() - сортирует элементы в стриме
    - .liminte(val) - ограничивает кол-во элементов в стриме
    - .skip(10) пропустить первые 10 элементов



